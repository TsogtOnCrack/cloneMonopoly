import React, { HTMLAttributes, ButtonHTMLAttributes, ReactNode } from 'react';
declare type NavDirection = 'forward' | 'backward';
declare type NavBtnProps = ButtonHTMLAttributes<HTMLButtonElement> & {
    show?: boolean;
};
declare type ReactSimplyCarouselStaticProps = {
    activeSlideIndex: number;
    activeSlideProps?: HTMLAttributes<any>;
    autoplay?: boolean;
    autoplayDirection?: NavDirection;
    backwardBtnProps?: NavBtnProps;
    children?: ReactNode;
    containerProps?: HTMLAttributes<HTMLDivElement>;
    delay?: number;
    disableNavIfAllVisible?: boolean;
    easing?: string;
    forwardBtnProps?: NavBtnProps;
    hideNavIfAllVisible?: boolean;
    innerProps?: HTMLAttributes<HTMLDivElement>;
    itemsListProps?: HTMLAttributes<HTMLDivElement>;
    itemsToScroll?: number;
    itemsToShow?: number;
    onAfterChange?: (activeSlideIndex: number, deprecated_positionSlideIndex: number) => void;
    onRequestChange: (newActiveSlideIndex: number) => void;
    speed?: number;
    updateOnItemClick?: boolean;
    centerMode?: boolean;
    infinite?: boolean;
    disableNavIfEdgeVisible?: boolean;
    disableNavIfEdgeActive?: boolean;
    dotsNav?: {
        show?: boolean;
        activeClassName?: string;
    } & ButtonHTMLAttributes<HTMLButtonElement>;
    dotsNavWrapperProps?: HTMLAttributes<HTMLDivElement>;
};
declare type ReactSimplyCarouselResponsiveProps = (Omit<Omit<ReactSimplyCarouselStaticProps, 'activeSlideIndex'>, 'onRequestChange'> & {
    minWidth?: number;
    maxWidth?: number;
})[];
declare type ReactSimplyCarouselProps = ReactSimplyCarouselStaticProps & {
    responsiveProps?: ReactSimplyCarouselResponsiveProps;
};
declare function ReactSimplyCarousel({ responsiveProps, ...props }: ReactSimplyCarouselProps): JSX.Element;
declare const _default: React.MemoExoticComponent<typeof ReactSimplyCarousel>;
export default _default;
